#include <stdio.h>  //client
#include <stdlib.h>
#include <string.h>
#include <windows.h>
#include <process.h> 
#pragma comment(lib, "ws2_32.lib")	
#define PORT 50000
#define BUFFERSIZE 255
#define NAMESIZE 10
unsigned __stdcall recvMessage(void* arg)
{
    int mSock = (int)arg;
    char rcvBuf[NAMESIZE+BUFFERSIZE];
    while(1)
    {
        if(recv(mSock, rcvBuf, sizeof(rcvBuf), 0) <= 0)
            break;
        else
		{
            printf("%s", rcvBuf);
        }
    }
    return 0;
}
unsigned __stdcall sendMessage(void* arg)
{
    int mSock = (int)arg;
    char tmpBuf[BUFFERSIZE];
    char nameBuf[NAMESIZE];
    char sndBuf[NAMESIZE+BUFFERSIZE];
    memset(nameBuf,0, sizeof(nameBuf));
    memset(tmpBuf,0, sizeof(tmpBuf));
    memset(sndBuf,0, sizeof(sndBuf));
    printf("nickname을 입력하세요:");
    gets(nameBuf);
    send(mSock, sndBuf, sizeof(sndBuf), 0);
    while(1)
    {
        memset(tmpBuf,0, sizeof(tmpBuf));
        memset(sndBuf,0, sizeof(sndBuf));
        gets(tmpBuf);
			if(strcmp(strlwr(tmpBuf), "quit") == 0)
			{
			   send(mSock, sndBuf, sizeof(sndBuf), 0);
			  closesocket(mSock);
			   printf("Connection Closed");
			   break;
		 }
		 else
		 {
			 if(tmpBuf[0]=='3' | tmpBuf[0]=='6' | tmpBuf[0]=='9')
			{
				tmpBuf[0]='*';
				if(tmpBuf[1]=='3' | tmpBuf[1]=='6' | tmpBuf[1]=='9')
				{
				 tmpBuf[0]='*';
				 tmpBuf[1]='*';

					if(tmpBuf[2]=='3' | tmpBuf[2]=='6' | tmpBuf[2]=='9')
						{
						tmpBuf[0]='*';
						tmpBuf[1]='*';
						tmpBuf[2]='*';
						}
					else if(tmpBuf[2]=='0' | tmpBuf[2]=='1' | tmpBuf[2]=='2' |tmpBuf[2]=='4' | tmpBuf[2]=='5' | tmpBuf[2]=='7'|tmpBuf[2]=='8')
					{
						tmpBuf[0]='*';
						tmpBuf[1]='*';
						tmpBuf[2]=NULL;
					}
				}
				else if(tmpBuf[1]=='1' | tmpBuf[1]=='2' | tmpBuf[1]=='4'| tmpBuf[1]=='5'| tmpBuf[1]=='7'| tmpBuf[1]=='8'| tmpBuf[1]=='0')
				{
					tmpBuf[0]='*';
				 tmpBuf[1]=NULL;
					if(tmpBuf[2]=='3' | tmpBuf[2]=='6' | tmpBuf[2]=='9')
						{
						tmpBuf[0]='*';
						tmpBuf[1]='*';
						tmpBuf[2]=NULL;
						}
				}
			 }
			 else if(tmpBuf[0]=='1' | tmpBuf[0]=='2' | tmpBuf[0]=='4'| tmpBuf[0]=='5'| tmpBuf[0]=='7'| tmpBuf[0]=='8'| tmpBuf[0]=='0')
			{
				
				if(tmpBuf[1]=='3' | tmpBuf[1]=='6' | tmpBuf[1]=='9')
				{
				 tmpBuf[0]='*';
				 tmpBuf[1]=NULL;

					if(tmpBuf[2]=='3' | tmpBuf[2]=='6' | tmpBuf[2]=='9')
						{
						tmpBuf[0]='*';
						tmpBuf[1]='*';
						tmpBuf[2]=NULL;
						}
				}
				else if(tmpBuf[1]=='1' | tmpBuf[1]=='2' | tmpBuf[1]=='4'| tmpBuf[1]=='5'| tmpBuf[1]=='7'| tmpBuf[1]=='8'| tmpBuf[1]=='0')
				{
					if(tmpBuf[2]=='3' | tmpBuf[2]=='6' | tmpBuf[2]=='9')
						{
						tmpBuf[0]='*';
						tmpBuf[1]=NULL;
						tmpBuf[2]=NULL;
						}
				}
			 }
			 
            sprintf(sndBuf, "%s=%s", nameBuf, tmpBuf);
            send(mSock, sndBuf, sizeof(sndBuf), 0);
        }
    }
    return 0;
}
int main(int argc, char* argv[])
{
    unsigned long hSendThread;
    unsigned long hRecvThread;
    unsigned sendThreadID;
    unsigned recvThreadID;
    WSADATA wsData;
    if(WSAStartup(MAKEWORD(2,2), &wsData) != 0)
    {
        printf("WSAStartup() error!");
        return -1;
    }
    SOCKET clientSock = socket(PF_INET, SOCK_STREAM, 0);
    if(clientSock == INVALID_SOCKET)
    {
        printf("socket() error.");
        return -1;
    }
 
    SOCKADDR_IN serverAddr;
    memset(&serverAddr,0, sizeof(serverAddr));
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = inet_addr("127.0.0.1");
	serverAddr.sin_port = htons(PORT);
    if(connect(clientSock, (SOCKADDR*)&serverAddr, sizeof(serverAddr)) == -1)
    {
        printf("connect() error.");
        return -1;
    }
    hSendThread = _beginthreadex(NULL, 0, sendMessage, (void*)clientSock, 0, &sendThreadID);
    hRecvThread = _beginthreadex(NULL, 0, recvMessage, (void*)clientSock, 0, &recvThreadID);
    WaitForSingleObject((HANDLE)hSendThread, INFINITE);
    WaitForSingleObject((HANDLE)hRecvThread, INFINITE);
}
