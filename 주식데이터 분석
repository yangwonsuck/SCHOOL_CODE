#NASDAQ-HM-TEST
import pandas as pd
from sklearn.metrics import accuracy_score
from sklearn.metrics import recall_score
from sklearn.metrics import precision_score
from sklearn.linear_model import LinearRegression
import datetime as dt
import statsmodels.formula.api as sm

frame = pd.read_csv('NASDAQ_NEWV.csv')

frame['BAA'] = frame['BAA'].shift(+3)
frame['AMBNS'] = frame['AMBNS'].shift(+3)
frame['CPIAUCSL'] = frame['CPIAUCSL'].shift(+3)
frame['CSUSHPINSA'] = frame['CSUSHPINSA'].shift(+3)
frame['DGORDER'] = frame['DGORDER'].shift(+3)
frame['EXCHUS'] = frame['EXCHUS'].shift(+3)
frame['EXJPUS'] = frame['EXJPUS'].shift(+3)
frame['EXKOUS'] = frame['EXKOUS'].shift(+3)
frame['FEDFUNDS'] = frame['FEDFUNDS'].shift(+3)
frame['GACDFSA066MSFRBPHI'] = frame['GACDFSA066MSFRBPHI'].shift(+3)
frame['HOUST'] = frame['HOUST'].shift(+3)
frame['HSN1F'] = frame['HSN1F'].shift(+3)
frame['INDPRO'] = frame['INDPRO'].shift(+3)
frame['IR3TCD01KRM156N'] = frame['IR3TCD01KRM156N'].shift(+3)
frame['KORCPIALLMINMEI'] = frame['KORCPIALLMINMEI'].shift(+3)
frame['KORPROINDMISMEI'] = frame['KORPROINDMISMEI'].shift(+3)
frame['LREMTTTTUSM156S'] = frame['LREMTTTTUSM156S'].shift(+3)
frame['LRUNTTTTKRM156S'] = frame['LRUNTTTTKRM156S'].shift(+3)
frame['NEWORDER'] = frame['NEWORDER'].shift(+3)
frame['PPIACO'] = frame['PPIACO'].shift(+3)
frame['T10Y2YM'] = frame['T10Y2YM'].shift(+3)
frame['TCU'] = frame['TCU'].shift(+3)
frame['TOTALSA'] = frame['TOTALSA'].shift(+3)
frame['TWEXBMTH'] = frame['TWEXBMTH'].shift(+3)
frame['UMCSENT'] = frame['UMCSENT'].shift(+3)
frame['UNRATENSA'] = frame['UNRATENSA'].shift(+3)
frame['USSLIND'] = frame['USSLIND'].shift(+3)
frame['XTEXVA01CNM667S'] = frame['XTEXVA01CNM667S'].shift(+3)
frame['XTIMVA01KRM667S'] = frame['XTIMVA01KRM667S'].shift(+3)
frame['CA'] = frame['CA'].shift(+3)
frame['PB'] = frame['PB'].shift(+3)
frame['APART'] = frame['APART'].shift(+3)
frame['CUNCOST'] = frame['CUNCOST'].shift(+3)
frame['EXPORTCOST'] = frame['EXPORTCOST'].shift(+3)
frame['POLICY'] = frame['POLICY'].shift(+4)
frame['TRAFVOLUME'] = frame['TRAFVOLUME'].shift(+4)
frame = frame.drop([0, 1, 2], 0)   #앞에 2씩 shift로 인한 NAN값을 제거

features = ['DATE', 'Open', 'High', 'Low', 'Close','Adj Close','HM_rate','HM4UP','BAA','KORPROINDMISMEI','KORCPIALLMINMEI',
            'TOTALSA','AMBNS','CPIAUCSL','CSUSHPINSA','DGORDER','EXCHUS','EXJPUS','EXKOUS','FEDFUNDS','HOUST','HSN1F','INDPRO','IR3TCD01KRM156N',
        'LREMTTTTUSM156S','LRUNTTTTKRM156S','PPIACO','T10Y2YM','TCU','TWEXBMTH','UMCSENT','UNRATENSA',
          'USSLIND','XTEXVA01CNM667S','XTIMVA01KRM667S','CA','PB','APART','CUNCOST','EXPORTCOST','POLICY','TRAFVOLUME' ]      
Dependent='HM4UP'
Dependent2='LM4D'
x = frame[features]
y = frame[[Dependent]]
X_train = frame[features].iloc[:84, :]
y_train = frame[Dependent].iloc[:84]
X_test = frame[features].iloc[84:, :]
y_test = frame[Dependent].iloc[84:]
model= sm.ols(formula = 'HM4UP ~BAA+EXJPUS+IR3TCD01KRM156N+XTIMVA01KRM667S+CA+PB+EXPORTCOST', data = X_train).fit()
y_predict=model.predict(X_test)
r_square=model.rsquared
print('R-SQUARE:',r_square)
print('Pvalue :', model.pvalues)
dfnew = pd.DataFrame(y_predict,columns=['predict_HM'])
predict=dfnew['predict_HM']=dfnew['predict_HM'].apply(lambda x:0 if x <0.5  else 1)
accuracy = accuracy_score(y_test,predict)
print(f'accuracy: {accuracy:.3}')
precision = precision_score(y_test,predict)
print(f'precision: {precision:.3}')
recall = recall_score(y_test,predict)
print(f'recall: {recall:.3}')
merged=pd.merge(X_test,dfnew,left_index=True, right_index=True,how='outer')
merged = merged.drop(['BAA','KORPROINDMISMEI','KORCPIALLMINMEI',
            'TOTALSA','AMBNS','CPIAUCSL','CSUSHPINSA','DGORDER','EXCHUS','EXJPUS','EXKOUS','FEDFUNDS','HOUST','HSN1F','INDPRO','IR3TCD01KRM156N',
        'LREMTTTTUSM156S','LRUNTTTTKRM156S','PPIACO','T10Y2YM','TCU','TWEXBMTH','UMCSENT','UNRATENSA',
          'USSLIND','XTEXVA01CNM667S','XTIMVA01KRM667S','CA','PB','APART','CUNCOST','EXPORTCOST','POLICY','TRAFVOLUME'], axis=1)
merged.to_csv("NASDAQ_RESULT_HM6.csv")
